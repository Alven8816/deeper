% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/CV.predictModel.R
\name{CV.predictModel}
\alias{CV.predictModel}
\title{The external cross validation analysis for SL model}
\usage{
CV.predictModel(Y, X, base_model, cvControl = list(), ...)
}
\arguments{
\item{Y}{the dependence, like certain environmental pollutants(eg. PM2.5) in training data that we
want to predict}

\item{X}{the other predictors(eg. temp, wind speed) in training data that we
want to use to predict air pollutants}

\item{base_model}{character string in format of "SL.xgboost","SL.randomForest"}

\item{cvControl}{a list to control the cross validation,default with 10-fold random CV}

\item{...}{other parameters that belong to 'SuperLearner' package}
}
\value{
a list including
the cross validation model training information;
the cross validation result
}
\description{
conduct the external cross-validation analysis for SL model
}
\examples{
\dontrun{
# Get the cross validation values with 2 kinds of machine learming methods
# and an ensemble models automatically choosed based on the choosed models

# Spliting training set into two parts based on outcome: 80\% and 20\%
set.seed(1234)
data(envir_example)
index <- caret::createDataPartition(envir_example$PM2.5, p = 0.8, list = FALSE)
trainSet <- envir_example[index, ]
testSet <- envir_example[-index, ]

# set the predictor "PM2.5" and dependence variables
predictor <- colnames(envir_example)[-c(1, 6)]
dependence <- c("PM2.5")

## ensemble 2 kinds of multi models
sl_lib <- c("SL.xgboost", "SL.ranger")

# get the predict model
pred_result <- CV.predictModel(
  Y = trainSet[, dependence], X = trainSet[, predictor],
  base_model = sl_lib
)
}
}
